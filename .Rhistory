library(GEOquery)
BiocManager::install('GEOquery')
library(GEOquery)
setwd("D:/WorkFiles/Mcgill/Research/Project/BMP4/Results/SCP2_Microarray/SCP2_Microarray_analysis")
raw_data <- read.table('SCP2_Microarray.txt', header = T, row.names = 1, stringsAsFactors = F)
log2_data <- log2(raw_data)
data_norm <- as.matrix(normalizeQuantiles(log2_data))
data_norm <- as.matrix(normalizeQuantiles(log2_data))
library(tidyverse)
library(dplyr)
data_norm <- as.matrix(normalizeQuantiles(log2_data))
library(limma)
# import packages
library(limma)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(tidyverse)
library(dplyr)
raw_data <- read.table('SCP2_Microarray.txt', header = T, row.names = 1, stringsAsFactors = F)
log2_data <- log2(raw_data)
data_norm <- as.matrix(normalizeQuantiles(log2_data))
boxplot(data_norm, outline=F)
design <- cbind(1, c(0,0,1,1))
tt <- topTable(fit, coef=2, adjust.method = 'BH', sort.by = 'p', number =50000)
cor()
design_mat <- cbind(1, c(0,0,1,1))
fit <- lmFit(data_norm, design_mat)
fit <- eBayes(fit)
tt <- topTable(fit, coef=2, adjust.method = 'BH', sort.by = 'p', number =50000)
cor()
pheatmap(cor(data_norm), show_rownames = F, breaks = seq(0.95,1,by=0.001))
pheatmap(cor(data_norm), show_rownames = F, breaks = seq(0.95,1,by=0.001), color = c('blue', 'white', 'red'))
pheatmap(
cor(data_norm), show_rownames=F, breaks = seq(0.95,1,by=0.001),
color = colorRampPalette(c('blue', 'white', 'red'))
)
pheatmap(
cor(data_norm), show_rownames=F, breaks = seq(0.95,1,by=0.001),
color = colorRampPalette(c('blue', 'white', 'red'))(100)
)
seq(0.95, 1, by = 0.001
)
length( seq(0.95, 1, by = 0.001))
pheatmap(
cor(data_norm), show_rownames=F, breaks = seq(0.95,1,by=0.001),
color = colorRampPalette(c('blue', 'white', 'red'))(51)
)
cor(data_norm)
pheatmap(
cor(data_norm), show_rownames=F, breaks = col_break,
color = colorRampPalette(c('blue', 'white', 'red'))(length(col_break)))
col_break = seq(0.990, 1, by=0.001)
pheatmap(
cor(data_norm), show_rownames=F, breaks = col_break,
color = colorRampPalette(c('blue', 'white', 'red'))(length(col_break)))
design_mat
View(raw_data)
View(data_norm)
# volcano plot
volcano_plot <-
ggplot(tt, aes(x=logFC, y=log_trans, color=color))+
geom_point(size= 3, shape=16, position = 'jitter', alpha=0.6) +
scale_color_manual(values = c('black', 'blue', 'red')) +
geom_hline(yintercept = 1.30102999566398, size=1, linetype='dashed') +
xlim(-3.5,3.5) +
theme_classic()
volcano_plot
tt$log_trans <- -log10(tt$adj.P.Val)
tt <- tt %>%
mutate(color=case_when(logFC<0 & adj.P.Val<0.05 ~ 'blue',
logFC>0 & adj.P.Val<0.05 ~ 'red',
TRUE ~ 'black'))
# volcano plot
volcano_plot <-
ggplot(tt, aes(x=logFC, y=log_trans, color=color))+
geom_point(size= 3, shape=16, position = 'jitter', alpha=0.6) +
scale_color_manual(values = c('black', 'blue', 'red')) +
geom_hline(yintercept = 1.30102999566398, size=1, linetype='dashed') +
xlim(-3.5,3.5) +
theme_classic()
volcano_plot
png(filename = 'volcano_plot.png', res = 600, width = 6000, height = 3600)
jpeg(filename = 'volcano_plot.jpeg', res = 600, width = 6000, height = 3600)
volcano_plot
dev.off()
dev.off()
